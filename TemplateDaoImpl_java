
import java.util.ArrayList;
import java.util.List;

import org.apache.ibatis.session.SqlSession;
import org.apache.ibatis.session.SqlSessionFactory;
import org.fire.dao.DBPoolMgr;
import org.fire.dao.entity.?classname?;
import org.fire.dao.mapper.?mappername?;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by dao tool
 * @author lhl
 *
 */
public class ?daoname? implements ?mappername?
{
	private static final Logger LOG = LoggerFactory.getLogger(?daoname?.class);
	
	private SqlSessionFactory sf = DBPoolMgr.get?dbname?SqlSessionFactory();
	
	@Override
	public int insert(?classname? t)
	{
		SqlSession s = sf.openSession();
		
		int ret = 0;
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			ret = map.insert(t);
			s.commit();
		}
		catch (Throwable ex)
		{
			ret = -1;
			s.rollback();
			LOG.error("执行 insert 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return ret;
	}

	@Override
	public int insertBatch(List<?classname?> t)
	{
		if (t.size() == 0)
		{
			return 0;
		}
		
		SqlSession s = sf.openSession();
		
		int ret = 0;
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			ret = map.insertBatch(t);
			s.commit();
		}
		catch (Throwable ex)
		{
			ret = -1;
			s.rollback();
			LOG.error("执行 insertBatch 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return ret;
	}

	@Override
	public int delete(?classname? t)
	{
		SqlSession s = sf.openSession();
		
		int ret = 0;
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			ret = map.delete(t);
			s.commit();
		}
		catch (Throwable ex)
		{
			ret = -1;
			s.rollback();
			LOG.error("执行 delete 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return ret;
	}

	@Override
	public int deleteBatch(List<?classname?> t)
	{
		if (t.size() == 0)
		{
			return 0;
		}
		
		SqlSession s = sf.openSession();
		
		int ret = 0;
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			ret = map.deleteBatch(t);
			s.commit();
		}
		catch (Throwable ex)
		{
			ret = -1;
			s.rollback();
			LOG.error("执行 deleteBatch 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return ret;
	}

	@Override
	public int update(?classname? t)
	{
		SqlSession s = sf.openSession();
		
		int ret = 0;
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			ret = map.update(t);
			s.commit();
		}
		catch (Throwable ex)
		{
			ret = -1;
			s.rollback();
			LOG.error("执行 update 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return ret;
	}

	@Override
	public int updateBatch(List<?classname?> t)
	{
		if (t.size() == 0)
		{
			return 0;
		}
		
		SqlSession s = sf.openSession();
		
		int ret = 0;
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			ret = map.updateBatch(t);
			s.commit();
		}
		catch (Throwable ex)
		{
			ret = -1;
			s.rollback();
			LOG.error("执行 updateBatch 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return ret;
	}

	@Override
	public ?classname? selectByPrimaryKey(Object primaryKey)
	{
		SqlSession s = sf.openSession();
		
		?classname? info = null;
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			info = map.selectByPrimaryKey(primaryKey);
		}
		catch (Throwable ex)
		{
			LOG.error("执行 selectByPrimaryKey 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return info;
	}

	@Override
	public List<?classname?> selectBySecondKey(Object secondKey)
	{
		SqlSession s = sf.openSession();
		
		List<?classname?> info = new ArrayList<?classname?>();
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			info = map.selectBySecondKey(secondKey);
		}
		catch (Throwable ex)
		{
			LOG.error("执行 selectBySecondKey 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return info;
	}

	@Override
	public List<?classname?> selectAll()
	{
		SqlSession s = sf.openSession();
		
		List<?classname?> info = new ArrayList<?classname?>();
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			info = map.selectAll();
		}
		catch (Throwable ex)
		{
			LOG.error("执行 selectAll 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return info;
	}

	@Override
	public int getMaxID()
	{
		SqlSession s = sf.openSession();
		
		int ret = 0;
		?mappername? map = s.getMapper(?mappername?.class);
		try
		{
			ret = map.getMaxID();
		}
		catch (Throwable ex)
		{
			LOG.error("执行 getMaxID 出错", ex);
		}
		finally
		{
			s.close();
		}
		
		return ret;
	}
}
